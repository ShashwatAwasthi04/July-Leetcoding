class Solution {
    static int max(int x,int y){
        while(x%y==0)
            x=x/y;
        return x;
    }
    static int isUgly(int x){
        x=max(x,2);
        x=max(x,3);x=max(x,5);
        
        if(x==1)
            return 1;
        else
            return 0;
    }
    public int nthUglyNumber(int n) {
        int x=1;
        int c=0;
        while(c!=n){
            if(isUgly(x)==1)
                c++;
            x++;
        }
        return x-1;
    }
}



//Above Approach Gave TLE





//Finally
class Solution {
     public int nthUglyNumber(int n) {
        if(n==0)
            return -1;
        if(n==1)
            return 1;
        
        int p2=0;
        int p3=0;
        int p5=0;
        
        int dp[] = new int[n];
        dp[0]=1;
        for(int i=1;i<n;i++){
            dp[i] = Math.min(dp[p2]*2,Math.min(dp[p3]*3,dp[p5]*5));
            if(dp[i]==dp[p2]*2)
                p2++;
            if(dp[i]==dp[p3]*3)
                p3++;
            if(dp[i]==dp[p5]*5)
                p5++;
        }
        return dp[n-1];
    }
}





