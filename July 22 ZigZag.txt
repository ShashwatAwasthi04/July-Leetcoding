/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<>();
        Deque<TreeNode> queue = new LinkedList<>();
        boolean turn = true;
        if (root == null) {
            return res;
        }
        queue.offer(root);
        while (!queue.isEmpty()) {
            if (turn) {
                //From left to right
                turn = false;
                List<Integer> tmp = new ArrayList<>();
                int queueLen = queue.size();
                for (int i = 0; i < queueLen; i++) {
                    if (queue.getFirst().left != null) {
                        queue.addLast(queue.getFirst().left);
                    }
                    if (queue.getFirst().right != null) {
                        queue.addLast(queue.getFirst().right);
                    }
                    tmp.add(queue.removeFirst().val);
                }
                res.add(tmp);
            } else {
                                 //From right to left
                turn = true;
                List<Integer> tmp = new ArrayList<>();
                int queueLen = queue.size();
                for (int i = 0; i < queueLen; i++) {
                    if (queue.getLast().right != null) {
                        queue.addFirst(queue.getLast().right);
                    }
                    if (queue.getLast().left != null) {
                        queue.addFirst(queue.getLast().left);
                    }
                    tmp.add(queue.removeLast().val);
                }
                res.add(tmp);
            }
 
        }
        return res;
    }
}

















